<?php

/*************************************************************
                DRUPAL HOOKS
*************************************************************/

/**
 * Implements hook_perms()
 */
function gs_profile_permission() {
  return array(
    'cannot cancel own account' => array(
      'title' => t("Can't cancel own user account"), 
      'description' => t('Block users in this role from cancelling their own accounts.'),
    ),
    'access own notifications tab' => array(
      'title' => t("Access own notificatons tab"), 
      'description' => t('Allow users to manage their contact preferences.'),
    ),
    'access any notifications tab' => array(
      'title' => t("Access any notificatons tab"), 
      'description' => t('Allow users to manage their contact preferences.'),
    ),
  );
}

/**
 * Implementation of hook_menu();
 */
function gs_profile_menu() {
  $items['user/%user/notification'] = array(
    'title' => t('Notifications'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gs_profile_nofications_form', 1),
    'access callback' => 'gs_profile_access_notifications_tab',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
    
  return $items;
}

/**
 * Access callback
 */
function gs_profile_access_notifications_tab($account) {
  if (user_access('access any notifications tab')) {
    return TRUE;
  }
  if (user_access('access own notifications tab')) {
    global $user;
    if ($account->uid == $user->uid) {
      return TRUE;
    }
  }
  
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gs_profile_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // user object
  $account = $form['#user'];

  // profile tab
  if (drupal_match_path(current_path(), "user/*/edit/profile")) {
    // hide formatting info
    drupal_add_js('
      jQuery( function($) {
        $(document).ready( function() {
          $(".filter-wrapper").hide();
        });
      });
    ','inline');
    // title
    $form['#prefix'] = '<h2>Profile Information</h2>';
    // cancel button - links to "view profile" page
    $form['actions']['cancel'] = array(
      '#markup' => l('Cancel', "user/{$account->uid}",array('attributes' => array('class'=>array('button')))),
    );
  }
}
/**
 * Implements mymodule_preprocess_hook()
 */
function gs_profile_preprocess_page(&$vars) {
  if (drupal_match_path(current_path(), "user/*")) {
    // set page title
    $account = menu_get_object('user',1);
    $profile = profile2_load_by_user($account,'profile');
    $fullname = "{$profile->field_first_name['und'][0]['value']} {$profile->field_last_name['und'][0]['value']}";
    $name = strlen(trim($fullname)) ? $fullname : $account->name;
    drupal_set_title("View Profile - $name");
  }
}
/**
 * Implements mymodule_preprocess_hook()
 */
function gs_profile_preprocess_breadcrumb(&$vars) {
  if (drupal_match_path(current_path(), "user/*")) {
    // set breadcrumb
    $account = menu_get_object('user',1);
    $profile = profile2_load_by_user($account,'profile');
    $fullname = "{$profile->field_first_name['und'][0]['value']} {$profile->field_last_name['und'][0]['value']}";
    $name = strlen(trim($fullname)) ? $fullname : $account->name;
    array_pop($vars['breadcrumb']);
    $vars['breadcrumb'][] = $name;
  }
}
/**
 * Implements mymodule_preprocess_hook()
 */
function gs_profile_preprocess_panels_render_display_form(&$vars) {
  if (drupal_match_path(current_path(), "user/*/edit")) {
    if (isset($vars['element']) && $vars['element']['#form_id'] == "user_profile_form") {
      $vars['element']['#theme'] = 'gs_profile_account_form';
      $vars['theme_hook_suggestions'][] = 'gs_profile_account_form';
    }
  }
}
/**
 * Implements hook_theme()
 */
function gs_profile_theme($existing, $type, $theme, $path) {
  return array(
    'gs_profile_account_form' => array(
      'variables' => array(), 
    ),
  );
}
/**
 * Theme gs_profile_account_form
 */
function theme_gs_profile_account_form($vars) {
  $output = '';
  
  // form
  $form = $vars['element']; 
  
  // user object
  $account = $vars['element']['#user'];
  $roles = array_values($account->roles);
  
  // hide elements for all roles except admin
  if (!user_access("administer permissions")) {
    hide($form['account']['status']);
    hide($form['overlay_control']);
    hide($form['contact']);
    hide($form['metatags']);
    hide($form['account']['name']);
    hide($form['actions']['cancel']);
  }
  
  // cancel button to go to view profile page
  $form['actions']['submit']['#prefix'] = l('Cancel', "user/{$account->uid}",array('attributes' => array('class'=>array('button'))));
  
  // email address
  $form['emailaddress'] = array('#type'=>'fieldset');
  $form['emailaddress']['title'] = array(
    '#type' => 'item', 
    '#prefix' => '<h2>'.t('Email Address').'</h2>',
    '#markup' => t("Your current email address is displayed below. To update, enter a new email address and confirm the change by entering your password at the bottom of the page."),
  );
  $form['emailaddress']['email'] = $form['account']['mail'];
  unset($form['emailaddress']['email']['#description']);
  hide($form['account']['mail']);
  $output .= render($form['emailaddress']);
  
  // change password
  $form['changepass'] = array('#type'=>'fieldset');
  $form['changepass']['title'] = array(
    '#type' => 'item', 
    '#prefix' => '<h2>'.t('Change Password').'</h2>',
    '#markup' => t("To update your password, enter and confirm a new password in the fields below. Then confirm this change by entering your old password at the bottom of the page."),
  );
  $form['changepass']['pass'] = $form['account']['pass'];
  $form['changepass']['pass']['pass1']['#title'] = t('New Password');
  $form['changepass']['pass']['pass2']['#title'] = t('Confirm New Password');
  unset($form['changepass']['pass']['#description']);
  unset($form['changepass']['pass']['#attached']);
  hide($form['account']['pass']);
  $output .= render($form['changepass']);

  // close account
  if (!user_access("cannot cancel own account")) {
    $form['closeaccount'] = array('#type'=>'fieldset');
    $form['closeaccount']['title'] = array(
      '#type' => 'item', 
      '#prefix' => '<h2>'.t('Close Account').'</h2>',
      '#markup' => t("Please read carefully - this action cannot be undone. Your profile information will be erased and you will no longer be able to sign in to this account: !c",
        array('!c'=>l("CLOSE MY ACCOUNT", "user/{$account->uid}/cancel", array( 'attributes' => array( 'class'=>array( 'close-my-account' ), 'alt'=> t( "Close my account" )))))),
    );
    $output .= render($form['closeaccount']);
  }

  // confrim changes
  $confirm = array('#type' => 'fieldset','#attributes'=>array('class'=>array('confirm-changes')));
  $confirm['pass'] = $form['account']['current_pass'];
  $confirm['pass']['#prefix'] = '<h2>'.t('Confirm Changes').'</h2>';
  $confirm['actions'] = $form['actions'];
  unset($confirm['pass']['#description']);
  hide($form['account']['current_pass']);
  hide($form['actions']);

  // elements from other modules for admnin only
  $output .= drupal_render_children($form);

  // continue - confirm changes
  $output .= render($confirm);
    
  // remove required form field stars
  drupal_add_js('
    jQuery( function($) {
      $(document).ready( function() {
        $("span.form-required").hide();
      });
    });
  ','inline');
  
  return $output;
}

/**
 * Implements hook_admin_paths_alter().
 */
function gs_profile_admin_paths_alter(&$paths) {
  // Treat all user pages as administrative.
  $paths['user/*/edit'] = FALSE;
  $paths['user/*/edit/profile'] = FALSE;
}

/**
 * Implements hook_menu_local_tasks_alter(
 */
function gs_profile_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;
  if(arg(0) == 'user' && $user->uid > 0) {
    $account = array(); $profile = array(); $notification = array(); $view = array();
    foreach($data['tabs'][0]['output'] as $key => $value) {
      if ($value['#link']['path'] == 'user/%/edit') {
        $value['#link']['title'] = 'Account';
        $account = $value;
      }
      if ($value['#link']['path'] == 'user/%/notification') {
        $notification = $value;
      }
      if ($value['#link']['path'] == 'user/%/view') {
        $view = $value;
      }
      if($user->uid > 1) {
        unset($data['tabs'][0]['output'][$key]);
      }
    }
    if (drupal_match_path(current_path(), "user/*\nuser/*/edit/profile")) {
      if (user_access("administer users") || $user->uid == arg(1)) {
        $link = array(
          'path' => 'user/%/edit/profile',
          'load_functions' => array( 1 => 'user_category_load' ),
          'access_callback' => 'user_edit_access',
          'page_callback' => 'drupal_get_form',
          'tab_parent' => 'user/%/edit',
          'tab_root' => 'user/%',
          'title' => 'Profile',
          'title_callback' => 'check_plain',
          'weight' => 3,
          'include_file' => 'modules/user/user.pages.inc',
          'href' => 'user/' . arg(1) . '/edit/profile',
          'tab_root_href' => 'user/' . arg(1),
          'tab_parent_href' => 'user/' . arg(1) . '/edit',
          'access' => 1,
          'localized_options' => array( 'html' => 1 ),
        );
        $profile = array(
          '#theme' => 'menu_local_task',
          '#link' => $link,
        );
      }
      if (drupal_match_path(current_path(), "user/*/edit/profile")) {
        $profile['#active'] = TRUE;
      }
    }
    if($user->uid > 1) {
      $data['tabs'][0]['output'] = array($view, $account, $profile, $notification);
      $data['tabs'][0]['count'] = 3;
      unset($data['tabs'][1]);
    }
  }
}

/*************************************************************
                FORMS
*************************************************************/

/**
 * Implementation of notification form on page: user/%user/notification
 */
function gs_profile_nofications_form($form, &$form_state, $account) {
  
  // $account = user_load(arg(1));

  $default_value_notify = TRUE; $default_value_news_list = TRUE; $default_value_list_list = FALSE;
  $dbresult = db_query("SELECT * FROM {profile} WHERE uid = :n LIMIT 0, 1", array(':n' => $account->uid));

  foreach ($dbresult as $record) {
    $notify_dbresult = db_query("SELECT * FROM {field_data_field_notify} WHERE entity_id = :n LIMIT 0, 1", array(':n' => $record->pid));
    foreach ($notify_dbresult as $notify_record) {
      $default_value_notify = $notify_record->field_notify_value;
    }
  }
  
  module_load_include('inc', 'gs_profile', 'inc/gs_profile_icontact.config');
  $icontact = array(
    'account_id' => GS_PROFILE_ACCOUNT_ID,
    'key' => GS_PROFILE_KEY,
    'user_icontact' => GS_PROFILE_USER,
    'pass' => GS_PROFILE_PASSWORD,
    'client_folder_id' => GS_PROFILE_CLIENT_FOLDER_ID,
  );
  $news_list_id = GS_PROFILE_NEWS_LIST_ID;
  $list_list_id = GS_PROFILE_LIST_LIST_ID;
  $result_str = '';
  $email = $account->mail;
  $firstname = "";
  $lastname = "";
  
  //fetching profile information
  $profile_dbresult = db_query("SELECT * FROM {profile} WHERE uid = :n ORDER BY `changed` DESC LIMIT 0, 1 ", array(':n' => $account->uid));
  foreach ($profile_dbresult as $value) {
    $p2en = entity_load("profile2", array($value->pid));
    if(isset($p2en[$value->pid]->field_first_name['und'][0]['value'])) {
      $firstname = $p2en[$value->pid]->field_first_name['und'][0]['value'];
    }
    if(isset($p2en[$value->pid]->field_last_name['und'][0]['value'])) {
      $lastname = $p2en[$value->pid]->field_last_name['und'][0]['value'];
    }
  }

  $contact_id = gs_profile_icontact_get_contact_id($icontact, $email);
  $news_default_value = gs_profile_icontact_get_subscription($icontact, $news_list_id, $contact_id);
  $list_default_value = gs_profile_icontact_get_subscription($icontact, $list_list_id, $contact_id);
  $form['account']['notify'] = array(
    '#type' => 'checkbox',
    '#prefix' => '<h2>Contact Preferences</h2>',
    '#title' => t('Do not notify me by email of replies to my comments'),
    '#default_value' => $default_value_notify,
  );
  $form['account']['news_list'] = array(
    '#type' => 'checkbox',
    '#title' => t('Sign me up for The News weekly newsletter for headlines from the world of news and entertainment'),
    '#default_value' => $news_default_value,
  );
  $form['account']['list_list'] = array(
    '#type' => 'checkbox',
    '#title' => t('Sign me up for The List newsletter to enter contests to win movie passes, DVDs, books, trips and more. List members also get advance notice of concert tickets prebuys.'),
    '#default_value' => $list_default_value,
  );
  $form['actions']['#prefix'] = '<div class="actions-notification-form">';
  $form['account']['hidden_news'] = array('#type' => 'hidden', '#value' => $news_default_value);
  $form['account']['hidden_list'] = array('#type' => 'hidden', '#value' => $list_default_value);
  $form['actions']['cancel'] = array('#markup' => l('Cancel', "user/{$account->uid}",array('attributes' => array('class'=>array('button')))), '#weight' => 10);
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('SAVE CHANGES'), '#weight' => 11);
  $form['actions']['#suffix'] = '</div>';
  
  // Link to edit profile on icontact
  // http://app.icontact.com/icp/mmail-mprofile.pl?r=60629731&l=34283&s=GYGD&m=459937&c=463136
  
  return $form;

}

/**
 * Submit handler for form gs_profile_nofications
 */
function gs_profile_nofications_form_submit($form, &$form_state) {
  $account = user_load(arg(1));

  module_load_include('inc', 'gs_profile', 'inc/gs_profile_icontact.config');
  $icontact = array(
    'account_id' => GS_PROFILE_ACCOUNT_ID,
    'key' => GS_PROFILE_KEY,
    'user_icontact' => GS_PROFILE_USER,
    'pass' => GS_PROFILE_PASSWORD,
    'client_folder_id' => GS_PROFILE_CLIENT_FOLDER_ID,
  );
  $news_list_id = GS_PROFILE_NEWS_LIST_ID;
  $list_list_id = GS_PROFILE_LIST_LIST_ID;

  $account_info = array('firstname' => '', 'lastname' => '', 'postal_code' => '', 'age' => '', 'sex' => '', 'email' => $account->mail);

  //fetching profile information
  $profile_dbresult = db_query("SELECT * FROM {profile} WHERE uid = :n ORDER BY `changed` DESC LIMIT 0, 1 ", array(':n' => $account->uid));
  foreach ($profile_dbresult as $value) {
    $p2en = entity_load("profile2", array($value->pid));
    if(isset($p2en[$value->pid]->field_first_name['und'][0]['value'])) { $account_info['firstname'] = $p2en[$value->pid]->field_first_name['und'][0]['value'];}
    if(isset($p2en[$value->pid]->field_last_name['und'][0]['value'])) { $account_info['lastname'] = $p2en[$value->pid]->field_last_name['und'][0]['value'];}
    if(isset($p2en[$value->pid]->field_postcode['und'][0]['value'])) { $account_info['postal_code'] = $p2en[$value->pid]->field_postcode['und'][0]['value'];}
    if(isset($p2en[$value->pid]->field_age['und'][0]['value'])) { $account_info['age'] = $p2en[$value->pid]->field_age['und'][0]['value'];}
    if(isset($p2en[$value->pid]->field_gender['und'][0]['value'])) { $account_info['sex'] = $p2en[$value->pid]->field_gender['und'][0]['value'];}
  }

  // News newsletter
  if($form_state['input']['news_list'] != $form_state['input']['hidden_news']) {
    if ($form_state['input']['news_list'] == 1) {
      
      gs_profile_icontact_add_contact($icontact, $account_info['email'], $account_info['firstname'], $account_info['lastname']); 
      $account_info['pid'] = gs_profile_icontact_get_contact_id($icontact, $account_info['email']);
      if (gs_profile_icontact_set_subscription($icontact, $news_list_id, $account_info['pid']) == 0) {
        gs_profile_subscribe_user_with_email($account_info, $icontact, $news_list_id, 'News');
      }
      else {
        drupal_set_message("You have been subscribed to the News newsletter.");
      }
    }
    else {
      if(gs_profile_icontact_unsubscribe($icontact, $news_list_id, gs_profile_icontact_get_contact_id($icontact, $account_info['email'])) == 1) {
        drupal_set_message("You have been unsubscribed from the News newsletter.");
      }
    }
  }

  // List newsletter
  if($form_state['input']['list_list'] != $form_state['input']['hidden_list']) {
    if ($form_state['input']['list_list'] == 1) {

      gs_profile_icontact_add_contact($icontact, $account_info['email'], $account_info['firstname'], $account_info['lastname']); 
      $account_info['pid'] = gs_profile_icontact_get_contact_id($icontact, $account_info['email']);
      
      if (gs_profile_icontact_set_subscription($icontact, $list_list_id, $account_info['pid']) == 0) {
        gs_profile_subscribe_user_with_email($account_info, $icontact, $list_list_id, 'List');
      }
      else {
        drupal_set_message("You have been subscribed to the List newsletter.");
      }
    }
    else {
      if(gs_profile_icontact_unsubscribe($icontact, $list_list_id, gs_profile_icontact_get_contact_id($icontact, $account_info['email'])) == 1) {
        drupal_set_message("You have been unsubscribed from the List newsletter.");
      }
    }
  }

  // notify by email
  $notify = $form_state['input']['notify'];
  $dbresult = db_query("SELECT * FROM {profile} WHERE uid = :n LIMIT 0, 1", array(':n' => $account->uid));
  
  foreach ($dbresult as $record) {
    $notify_dbresult = db_query("SELECT * FROM {field_data_field_notify} WHERE entity_id = :n LIMIT 0, 1", array(':n' => $record->pid));
    
    foreach ($notify_dbresult as $notify_record) {
      $sql = "UPDATE {field_revision_field_notify} SET field_notify_value = :n WHERE entity_type = :ent AND deleted = :del AND entity_id = :eni AND revision_id = :rev AND language = 'und' AND delta = :del;";
      $dbresult = db_query($sql, array(':n' => $notify, ':ent' => $notify_record->entity_type, ':del' => $notify_record->deleted, ':eni' => $notify_record->entity_id, ':rev' => $notify_record->revision_id, ':del' => $notify_record->delta));
      $sql = "UPDATE {field_data_field_notify} SET field_notify_value = :n WHERE entity_type = :ent AND deleted = :del AND entity_id = :eni AND revision_id = :rev AND language = 'und' AND delta = :del;";
      $dbresult = db_query($sql, array(':n' => $notify, ':ent' => $notify_record->entity_type, ':del' => $notify_record->deleted, ':eni' => $notify_record->entity_id, ':rev' => $notify_record->revision_id, ':del' => $notify_record->delta));
    }
  }
}

/**
 * Subscribe user via email 
 */
function gs_profile_subscribe_user_with_email($account_info, $icontact, $list_id, $list_name) {
  $to = 'm_keir@straight.com'; // email of our newsletter administrator

  $site_email = variable_get('site_mail', '');
  $my_module = 'gs_profile';
  $my_mail_token = time();
  $from = variable_get('system_mail', $site_email);
  $message = array(
      'id' => $my_module . '_' . $my_mail_token,
      'to' => $to,
      'subject' => 'Add Subscriber ' . $account_info['email'] . ' to newsletter News',
      'body' => '
User Email: ' . $account_info['email'] . ' 
First Name: ' . $account_info['firstname'] . '
Last Name: ' . $account_info['lastname'] . ' 
Postal Code: ' . $account_info['postal_code'] . ' 
Age: ' . $account_info['age'] . ' 
Sex: ' . $account_info['sex'] . ' 
User IContact ID: ' . $account_info['pid'] . ' 

Listname: ' . $list_name . '
ListId: ' . $list_id . '
https://www.icontact.com/login',
      'headers' => array(
      'From' => $from, 
      'Sender' => $from, 
      'Return-Path' => $from,
    ),
  );
  $system = drupal_mail_system('gs_profile', $my_mail_token);
  if ($system->mail($message)) {
    drupal_set_message('Your request to subscribe to the ' . $list_name. ' newsletter has been sent to our site administrator, you will be subscribed soon.');
  }
  else {
    drupal_set_message("Email failure, please try again later.", "warning");
  }
}
/*************************************************************
                ICONTACT HELPER FUNCTIONS
*************************************************************/

/**
 * Returns client folder id
 * This function is used for the setup, as client_folder_id doesn't change we store the variable in gs_profile_icontact_config.inc 
 */
function gs_profile_icontact_login($icontact, $pass) 
{ 
  // Build iContact authentication 
  $headers = array( 
    'Accept: text/xml', 
    'Content-Type: text/xml', 
    'Api-Version: 2.0', 
    'Api-AppId: ' . $icontact['key'], 
    'Api-Username: ' . $icontact['user_icontact'], 
    'Api-Password: ' . $icontact['pass'] 
  ); 

  // Connect to iContact to retrieve the client folder id 
  $ch=curl_init("https://app.icontact.com/icp/a/$account_id/c/"); 
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); 
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); 
  $buf = curl_exec($ch); 
  curl_close($ch); 

  // Extract client folder id from response 
  $client_folder_id = ""; 
  if (($pos=strpos($buf,"<clientFolderId>"))!==false) 
  { 
    $client_folder_id = substr($buf, strlen("<clientFolderId>")+$pos); 
    if (($pos=strpos($client_folder_id,"<"))!==false) 
    { 
      $client_folder_id = substr($client_folder_id, 0, $pos); 
    } 
  } 

  // Return client folder id
  return $client_folder_id; 
} 

/**
 * Subscribe user with $contact_id to list $lsit_id
 */
function gs_profile_icontact_set_subscription($icontact, $list_id, $contact_id) 
{ 
  // Build iContact authentication 
  $headers = array( 
    'Accept: text/xml', 
    'Content-Type: text/xml', 
    'Api-Version: 2.0', 
    'Api-AppId: ' . $icontact['key'], 
    'Api-Username: ' . $icontact['user_icontact'], 
    'Api-Password: ' . $icontact['pass'] 
  ); 

  // Build subscription record 
  $data = '<?xml version="1.0" encoding="UTF-8"?>'."\r\n<subscriptions>\r\n"; 
  $data.= "<subscription>\r\n"; 
  $data.= "<contactId>$contact_id</contactId>\r\n"; 
  $data.= "<listId>$list_id</listId>\r\n"; 
  $data.= "<status>normal</status>\r\n"; 
  $data.= "</subscription>\r\n</subscriptions>"; 

  // Add subscription 
  $ch=curl_init("https://app.icontact.com/icp/a/".$icontact['account_id']."/c/".$icontact['client_folder_id']."/subscriptions/");
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); 
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data); 
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); 
  $buf = curl_exec($ch); 
  curl_close($ch); 

  // Extract subscriptionID from response 
  $subscription_id = 0; 
  if (($pos=strpos($buf,"<subscriptionId>"))!==false) 
  { 
    $subscription_id = substr($buf, $pos+strlen("<subscriptionId>")); 
    if (($pos=strpos($subscription_id,"<"))!==false) 
    { 
      $subscription_id = substr($subscription_id,0,$pos); 
    } 
  } 

  // If the subscription could not be updated return 0
  if(strpos($buf,"could not be updated") > 0) {
    $subscription_id = 0;
  }

  // Return result 
  return $subscription_id; 
} 

/**
 * Add user with $email to the GS account on IContact (this does not subscribe the user to any list)
 */
function gs_profile_icontact_add_contact($icontact, $email, $firstname, $lastname) 
{ 
  // Build iContact authentication 
  $headers = array( 
    'Accept: text/xml', 
    'Content-Type: text/xml', 
    'Api-Version: 2.0', 
    'Api-AppId: ' . $icontact['key'], 
    'Api-Username: ' . $icontact['user_icontact'], 
    'Api-Password: ' . $icontact['pass'] 
  ); 
          
  // Build contact record 
  $data = '<?xml version="1.0" encoding="UTF-8"?>'."\r\n<contacts>\r\n"; 
  $data.= "<contact>\r\n"; 
  $data.= "<email>$email</email>\r\n"; 
  $data.= "<firstName>$firstname</firstName>\r\n"; 
  $data.= "<lastName>$lastname</lastName>\r\n"; 
  $data.= "<status>normal</status>\r\n"; 
  $data.= "</contact>\r\n</contacts>"; 

  // Add contact 
  $ch=curl_init("https://app.icontact.com/icp/a/".$icontact['account_id']."/c/".$icontact['client_folder_id']."/contacts/");
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); 
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data); 
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); 
  $buf = curl_exec($ch); 
  curl_close($ch); 

  // Extract contactId from response 
  $contact_id = ""; 
  if (($pos=strpos($buf,"<contactId>"))!==false) 
  { 
    $contact_id = substr($buf, $pos+strlen("<contactId>")); 
    if (($pos=strpos($contact_id,"<"))!==false) 
    { 
      $contact_id = substr($contact_id,0,$pos); 
    } 
  } 

  // If we have a contact id, we're good 
  $result = !empty($contact_id); 

  // Return result 
  return $result; 
} 

/**
 * Return contactid of user with $email
 */
function gs_profile_icontact_get_contact_id($icontact, $email) 
{ 
  // Build iContact authentication 
  $headers = array( 
    'Accept: text/xml', 
    'Content-Type: text/xml', 
    'Api-Version: 2.0', 
    'Api-AppId: ' . $icontact['key'], 
    'Api-Username: ' . $icontact['user_icontact'], 
    'Api-Password: ' . $icontact['pass'] 
  ); 
          
  // GET contact 
  $ch=curl_init("https://app.icontact.com/icp/a/".$icontact['account_id']."/c/".$icontact['client_folder_id']."/contacts?email=".URLEncode($email)); 
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); 
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); 
  $buf = curl_exec($ch); 
  curl_close($ch); 

  // Extract contact id from response 
  $contact_id = 0;
  if (($pos=strpos($buf,"<contactId>"))!==false) 
  {
    $contact_id = substr($buf, $pos+strlen("<contactId>")); 
    if (($pos=strpos($contact_id,"<"))!==false) 
    {
      $contact_id = substr($contact_id,0,$pos); 
    }
  }

  // Return contact id
  return $contact_id; 
} 

/**
 * Return subscription id for user with $contact_id on list with $list_id
 */
function gs_profile_icontact_get_subscription($icontact, $list_id, $contact_id) 
{ 
  // Build iContact authentication 
  $headers = array( 
    'Accept: text/xml', 
    'Content-Type: text/xml', 
    'Api-Version: 2.0', 
    'Api-AppId: ' . $icontact['key'], 
    'Api-Username: ' . $icontact['user_icontact'], 
    'Api-Password: ' . $icontact['pass'] 
  ); 
          
  // GET contact 
  $ch=curl_init("https://app.icontact.com/icp/a/".$icontact['account_id']."/c/".$icontact['client_folder_id']."/subscriptions/".$list_id."_".$contact_id);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); 
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); 
  $buf = curl_exec($ch); 
  curl_close($ch); 

  // Extract subscrition status  from response 
  $subscription_state = "";
  if (($pos=strpos($buf,"<status>"))!==false) 
  {
    $subscription_state = substr($buf, $pos+strlen("<status>")); 
    if (($pos=strpos($subscription_state,"<"))!==false) 
    {
      $subscription_state = substr($subscription_state,0,$pos); 
    }
  }

  // return subscription status  
  if($subscription_state == 'normal') {
    return TRUE;
  }
  else {
    return FALSE;
  }
} 

/**
 * Unsubscribe user $contact_id from $list_id
 */
function gs_profile_icontact_unsubscribe($icontact, $list_id, $contact_id) 
{ 
  // Build iContact authentication 
  $headers = array( 
    'Accept: text/xml', 
    'Content-Type: text/xml', 
    'Api-Version: 2.0', 
    'Api-AppId: ' . $icontact['key'], 
    'Api-Username: ' . $icontact['user_icontact'], 
    'Api-Password: ' . $icontact['pass'] 
  ); 

  // Build subscription record 
  $data = '<?xml version="1.0" encoding="UTF-8"?>'."\r\n<subscriptions>\r\n"; 
  $data.= "<subscription>\r\n"; 
  $data.= "<contactId>$contact_id</contactId>\r\n"; 
  $data.= "<listId>$list_id</listId>\r\n"; 
  $data.= "<status>unsubscribed</status>\r\n"; 
  $data.= "</subscription>\r\n</subscriptions>"; 

  // Add subscription 
  $ch=curl_init("https://app.icontact.com/icp/a/".$icontact['account_id']."/c/".$icontact['client_folder_id']."/subscriptions/");
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); 
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data); 
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); 
  $buf = curl_exec($ch); 
  curl_close($ch); 

  // Extract subscriptionID from response 
  $subscription_id = ""; 
  if (($pos=strpos($buf,"<subscriptionId>"))!==false) 
  { 
    $subscription_id = substr($buf, $pos+strlen("<subscriptionId>")); 
    if (($pos=strpos($subscription_id,"<"))!==false) 
    { 
      $subscription_id = substr($subscription_id,0,$pos); 
    } 
  } 

  // If we have a subscription id OR this subscription already unsubscribed, we're good 
  $result = !empty($subscription_id) || strpos($buf,"could not be updated")!==false; 

  // Return result 
  return $result; 
}

