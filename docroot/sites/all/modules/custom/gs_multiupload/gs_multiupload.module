<?php

/****************************
 * DRUPAL HOOKS
 ****************************/

/**
 * Implements hook_permission()
 */
function gs_multiupload_permission() {
  return array(
    'access multiupload' => array(
      'title' => t('Access Multiple File Upload'), 
      'description' => t('Dragg multiple files to page for upload.'), 
    ), 
  );
}

/**
 * Implements hook_menu()
 */
function gs_multiupload_menu() {
  $items['gs/multiupload/%node'] = array(
    'title' => 'Multiple File Upload', 
    'page callback' => 'theme', 
    'page arguments' => array('gs_multiupload_uploader'), 
    'access arguments' => array('access multiupload'), 
  );
  $items['gs/multiupload/%node/add'] = array(
    'title' => 'Multiple File Upload Add', 
    'page callback' => 'gs_multiupload_files_add', 
    'page arguments' => array(2), 
    'access arguments' => array('access multiupload'), 
    'type' => MENU_CALLBACK, 
  );
  $items['gs/multiupload/%node/set'] = array(
    'title' => 'Set field collection items to nodes', 
    'page callback' => 'gs_multiupload_files_set', 
    'page arguments' => array(2), 
    'access arguments' => array('access multiupload'), 
    'type' => MENU_CALLBACK, 
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function gs_multiupload_admin_paths() {
  if (variable_get('node_admin_theme')) {
    return array('gs/multiupload/*' => TRUE, );
  }
}

/**
 * Implements hook_theme()
 */
function gs_multiupload_theme($existing, $type, $theme, $path) {
  return array(
    'gs_multiupload_uploader' => array(
      'variables' => array(), 
      'template' => 'gs_multiupload-uploader', 
    ), 
  );
}

/**
 * Implements hook_js_alter()
 */
function gs_multiupload_js_alter(&$javascript) {
  if (drupal_match_path(current_path(), "gs/multiupload/*")) {
    // Swap out jQuery to use an updated version of the library.
    if (module_exists('jquery_update')) {
      if (array_key_exists("https://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js", $javascript)) {
        $path = "https://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js";
      } else {
        $path = drupal_get_path('module', 'jquery_update') . '/replace/jquery/jquery.min.js';
      }
    } else {
      $path = 'misc/jquery.js';
    }
    $javascript[$path]['data'] = url(drupal_get_path('module', 'gs_multiupload') . '/js/jquery.min.js',array('absolute'=>TRUE));
    $javascript[$path]['version'] = '1.7.2';
  }
}

/************************************
 * PREPROCESSORS
 ************************************/
/**
 * Implements MYMODULE_preprocess_page()
 */
function gs_multiupload_preprocess_page(&$vars) {
  // if (drupal_match_path(current_path(), "gs/multiupload/*")) {
  // }
}
/**
 * Implements MYMODULE_prepprocess_hook()
 */
function gs_multiupload_preprocess_gs_multiupload_uploader(&$vars) {
  $vars['close_button'] = '';
  $vars['node'] = menu_get_object('node',2);
  // set js variables
  drupal_add_js(array(
    'gs_multiupload' => array(
      'nid' => $vars['node']->nid,
      'maxfilesize' => variable_get('gs_multiupload_maxfilesize',5),
      'maxfiles' => variable_get('gs_multiupload_maxfiles',10),
    )
  ),'setting'); 
  // overlay
  if (overlay_get_mode() == 'child') {
    // refresh parent page after overlay closes
    overlay_request_page_refresh();
    // configure close buttons
    $vars['close_button'] = '<a class="button save">Save and Close</a>';
    drupal_add_js("
      (function($) {
        $(document).ready(function() {
          $('.save').bind('click', function() {
            $(this).html('Loading, please wait ...');
            $(this).unbind('click');
            $.post('/gs/multiupload/' + {$vars['node']->nid} + '/set', { 'fids[]': $.data(document,'fids') }, function(data) {
              console.log('close overlay');
              $('.overlay-close').click();
            });
            return false;
          });
        });
      })(jQuery);
    ",array('type'=>'inline','scope'=>'header'));
    // hide page elements
    drupal_add_js("
      (function($) {
        $(document).ready(function() {
          $('#overlay-tabs').hide();
          $('#overlay-close-wrapper').hide();
          $('#overlay-title').hide();
          $('div.breadcrumb').hide();
        });
      })(jQuery);
    ",array('type'=>'inline','scope'=>'header'));
  }
}

/*******************************
 * MENU CALLBACKS
 *******************************/

/**
 * Callback for gs/multiupload/%node
 * @param $node
 *    The node object returned by node_load()
 */
function gs_multiupload_files_add($node) {
  // allowed extensions
  $allowed_ext = array('jpg', 'jpeg', 'png', 'gif');
  // verify that there is values in the request
  if (strtolower($_SERVER['REQUEST_METHOD']) != 'post') {
    _gs_multiupload_exit_status('Error! Wrong HTTP method!', NULL, TRUE);
  }
  // verify that there is a pictures in the request
  if (array_key_exists('pic', $_FILES) && $_FILES['pic']['error'] == 0) {
    $pic = $_FILES['pic'];
    if (!in_array(pathinfo($pic['name'], PATHINFO_EXTENSION), $allowed_ext)) {
      _gs_multiupload_exit_status('Only ' . implode(',', $allowed_ext) . ' files are allowed!');
    }
    // File exists and is right extension
    if ($file = _gs_multiupload_file_save_upload($pic['tmp_name'])) {
      _gs_multiupload_exit_status($file->fid, $file);
    } else {
      _gs_multiupload_exit_status('Could not save temporary image!', $file, TRUE);
    }
  } else {
    _gs_multiupload_exit_status('Failed to upload image, try this image again!', NULL, TRUE);
  }
}

/**
 * Callback for gs/multiupload/%node/set
 * 
 * link field collection items to node
 */
function gs_multiupload_files_set($node) {
  $response = array('success' => FALSE);
  if (isset($_POST['fids'])) {
    // watchdog('gs_multiupload','$_POST[fids] <pre>'.print_r($_POST['fids'],1).'</pre>');
    $fids = (array)$_POST['fids'];
    $files = file_load_multiple($fids);
    $destination = file_default_scheme() . '://';
    foreach ($files as $fid => $file) {
      $newfile = file_move($file,$destination);
      $response['success'] = _gs_multiupload_fieldmediacollection_add($newfile, $node);
    }
  }
  drupal_json_output($response);
  exit;
}
 
/********************************
 * HELPER FUNCTIONS
 ********************************/
/**
 * Return status in json
 * @param $str
 *    message to display
 * @return json output
 */
function _gs_multiupload_exit_status($str, $file = NULL, $error = FALSE) {
  $response = array(
    'message' => $str,
  );
  if ($error) {
    watchdog('gs_multiupload', $str . ' $_FILES <pre>'.print_r($_FILES,1).'</pre>');
    ($file ? watchdog('gs_multiupload', $str . ' $file <pre>'.print_r($file,1).'</pre>') : NULL);
    watchdog('gs_multiupload', $str . ' drupal_get_messages <pre>'.print_r(drupal_get_messages(),1).'</pre>');
    $response['errors'] = TRUE;
  }
  drupal_json_output($response);
  exit;
}

/**
 * Add new field media collection
 * @param $file
 *    the file object
 * @param $node
 *    the node object
 * @param $uid
 *    user id (optional)
 * @return TRUE or FALSE
 */
function _gs_multiupload_fieldmediacollection_add($file, $node, $uid = NULL) {
  if (!is_object($file)) {
    return FALSE;
  }
  if (!is_object($node)) {
    return FALSE;
  }
  // Load the controller class file.
  module_load_include('inc', 'entity', 'includes/entity.controller');
  // Use the currently logged in user if a $uid argument is not defined.
  global $user;
  if (empty($uid)) {
    $uid = $user->uid;
  }
  // add field collection item
  try {
    // Setup the values in the structure expected by the field_collection entity.
    $newfile = (array)$file;
    $newfile['display'] = 1;
    $values = array(
      'field_name' => 'field_mediacollection', 
      'field_media' => array(
        LANGUAGE_NONE => array($newfile),
      ), 
    );
    $field_collection_item = entity_create('field_collection_item', $values);
    $field_collection_item->setHostEntity('node', $node);
    $field_collection_item->save();
    // watchdog('gs_multiupload',"\$entity id {$field_collection_item->item_id} <pre>".print_r($field_collection_item,1).'</pre>');
    return TRUE;
  } catch (Exception $exception) {
    watchdog_exception('gs_multiupload', $exception);
    return FALSE;    
  }
}


/**
 * Alter file_save_upload
 * @param see file_save_upload()
 * @return see file_save_upload()
 */
function _gs_multiupload_file_save_upload($source, $validators = array(), $destination = FALSE, $replace = FILE_EXISTS_RENAME) {
  global $user;
  static $upload_cache;

  // Return cached objects without processing since the file will have
  // already been processed and the paths in _FILES will be invalid.
  if (isset($upload_cache[$source])) {
    return $upload_cache[$source];
  }

  // Make sure there's an upload to process.
  if (empty($_FILES['pic']['name'])) {
    return NULL;
  }

  // Check for file upload errors and return FALSE if a lower level system
  // error occurred. For a complete list of errors:
  // See http://php.net/manual/en/features.file-upload.errors.php.
  switch ($_FILES['pic']['error']) {
    case UPLOAD_ERR_INI_SIZE:
    case UPLOAD_ERR_FORM_SIZE:
      drupal_set_message(t('The file %file could not be saved, because it exceeds %maxsize, the maximum allowed size for uploads.', array('%file' => $_FILES['pic']['name'], '%maxsize' => format_size(file_upload_max_size()))), 'error');
      return FALSE;

    case UPLOAD_ERR_PARTIAL:
    case UPLOAD_ERR_NO_FILE:
      drupal_set_message(t('The file %file could not be saved, because the upload did not complete.', array('%file' => $_FILES['pic']['name'])), 'error');
      return FALSE;

    case UPLOAD_ERR_OK:
      // Final check that this is a valid upload, if it isn't, use the
      // default error handler.
      if (is_uploaded_file($_FILES['pic']['tmp_name'])) {
        break;
      }

    // Unknown error
    default:
      drupal_set_message(t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $_FILES['pic']['name'])), 'error');
      return FALSE;
  }

  // Begin building file object.
  $file = new stdClass();
  $file->uid      = $user->uid;
  $file->status   = 0;
  $file->filename = trim(drupal_basename($_FILES['pic']['name']), '.');
  $file->uri      = $_FILES['pic']['tmp_name'];
  $file->filemime = file_get_mimetype($file->filename);
  $file->filesize = $_FILES['pic']['size'];

  $extensions = '';
  if (isset($validators['file_validate_extensions'])) {
    if (isset($validators['file_validate_extensions'][0])) {
      // Build the list of non-munged extensions if the caller provided them.
      $extensions = $validators['file_validate_extensions'][0];
    }
    else {
      // If 'file_validate_extensions' is set and the list is empty then the
      // caller wants to allow any extension. In this case we have to remove the
      // validator or else it will reject all extensions.
      unset($validators['file_validate_extensions']);
    }
  }
  else {
    // No validator was provided, so add one using the default list.
    // Build a default non-munged safe list for file_munge_filename().
    $extensions = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';
    $validators['file_validate_extensions'] = array();
    $validators['file_validate_extensions'][0] = $extensions;
  }

  if (!empty($extensions)) {
    // Munge the filename to protect against possible malicious extension hiding
    // within an unknown file type (ie: filename.html.foo).
    $file->filename = file_munge_filename($file->filename, $extensions);
  }

  // Rename potentially executable files, to help prevent exploits (i.e. will
  // rename filename.php.foo and filename.php to filename.php.foo.txt and
  // filename.php.txt, respectively). Don't rename if 'allow_insecure_uploads'
  // evaluates to TRUE.
  if (!variable_get('allow_insecure_uploads', 0) && preg_match('/\.(php|pl|py|cgi|asp|js)(\.|$)/i', $file->filename) && (substr($file->filename, -4) != '.txt')) {
    $file->filemime = 'text/plain';
    $file->uri .= '.txt';
    $file->filename .= '.txt';
    // The .txt extension may not be in the allowed list of extensions. We have
    // to add it here or else the file upload will fail.
    if (!empty($extensions)) {
      $validators['file_validate_extensions'][0] .= ' txt';
      drupal_set_message(t('For security reasons, your upload has been renamed to %filename.', array('%filename' => $file->filename)));
    }
  }

  // If the destination is not provided, use the temporary directory.
  if (empty($destination)) {
    $destination = 'temporary://';
  }

  // Assert that the destination contains a valid stream.
  $destination_scheme = file_uri_scheme($destination);
  if (!$destination_scheme || !file_stream_wrapper_valid_scheme($destination_scheme)) {
    drupal_set_message(t('The file could not be uploaded, because the destination %destination is invalid.', array('%destination' => $destination)), 'error');
    return FALSE;
  }

  $file->source = $source;
  // A URI may already have a trailing slash or look like "public://".
  if (substr($destination, -1) != '/') {
    $destination .= '/';
  }
  $file->destination = file_destination($destination . $file->filename, $replace);
  // If file_destination() returns FALSE then $replace == FILE_EXISTS_ERROR and
  // there's an existing file so we need to bail.
  if ($file->destination === FALSE) {
    drupal_set_message(t('The file %source could not be uploaded because a file by that name already exists in the destination %directory.', array('%source' => $source, '%directory' => $destination)), 'error');
    return FALSE;
  }

  // Add in our check of the the file name length.
  $validators['file_validate_name_length'] = array();

  // Call the validation functions specified by this function's caller.
  $errors = file_validate($file, $validators);

  // Check for errors.
  if (!empty($errors)) {
    $message = t('The specified file %name could not be uploaded.', array('%name' => $file->filename));
    if (count($errors) > 1) {
      $message .= theme('item_list', array('items' => $errors));
    }
    else {
      $message .= ' ' . array_pop($errors);
    }
    form_set_error($source, $message);
    return FALSE;
  }

  // Move uploaded files from PHP's upload_tmp_dir to Drupal's temporary
  // directory. This overcomes open_basedir restrictions for future file
  // operations.
  $file->uri = $file->destination;
  if (!drupal_move_uploaded_file($_FILES['pic']['tmp_name'], $file->uri)) {
    form_set_error($source, t('File upload error. Could not move uploaded file.'));
    watchdog('file', 'Upload error. Could not move uploaded file %file to destination %destination.', array('%file' => $file->filename, '%destination' => $file->uri));
    return FALSE;
  }

  // Set the permissions on the new file.
  drupal_chmod($file->uri);

  // If we are replacing an existing file re-use its database record.
  if ($replace == FILE_EXISTS_REPLACE) {
    $existing_files = file_load_multiple(array(), array('uri' => $file->uri));
    if (count($existing_files)) {
      $existing = reset($existing_files);
      $file->fid = $existing->fid;
    }
  }

  // If we made it this far it's safe to record this file in the database.
  if ($file = file_save($file)) {
    // Add file to the cache.
    $upload_cache[$source] = $file;
    return $file;
  }
  return FALSE;
}
